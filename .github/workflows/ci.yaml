name: Django CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DJANGO_SETTINGS_MODULE: project.settings_test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      DB_NAME: test_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: 5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-tests.txt

      - name: Install local package
        run: pip install -e .

      - name: Run flake8 linting
        run: |
          echo "Running flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..15}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... ($i)"
            sleep 2
          done
          
          if ! pg_isready -h localhost -p 5432; then
            echo "PostgreSQL did not become ready in time" >&2
            exit 1
          fi

      - name: Run migrations
        run: python manage.py migrate --verbosity 2

      - name: Run tests
        run: pytest --cov --cov-branch --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success()  # Only runs if test job succeeded

    steps:
      - name: Simulate deployment
        run: echo "Simulated deploy step - Dummy deploy to imaginary environment."